# Create the mapping between the GSA and the namespace.
# Requires the identity provider to be installed.
#
# Current recommendation is to have one GSA per namespace, named k8s-NAMESPACE - it is used to keep permissions
# isolated ( namespace is the main unit of isolation in k8s) and to simplify setup.
apiVersion: networking.istio.io/v1alpha3
kind: WorkloadGroup
metadata:
  name: gsa-${PROJECT_ID}
  namespace: ${WORKLOAD_NAMESPACE}
spec:
  metadata:
    labels:
      cr-google-service-account: "k8s-${WORKLOAD_NAMESPACE}.${PROJECT_ID}"
    annotations:
      security.cloud.google.com/IdentityProvider: google
  template:
    serviceAccount: k8s-${WORKLOAD_NAMESPACE}@${PROJECT_ID}.iam.gserviceaccount.com
---

# This config allows a Google Service Account to impersonate a Kubernetes Service Account by
# calling the 'TokenRequest' API to get audience-bound tokens equivalent with the tokens created
# by secret mounts.
# It also has permissions needed to get the configmaps for connecting to Istiod.

# In turn, the tokens can be used to access Istio and other services using KSA.
# The role is limited to the 'default' service account in the namespace.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ${WORKLOAD_NAMESPACE}
  name: gsa-${PROJECT_ID}
rules:
  - apiGroups: [""]
    resources:
      - "serviceaccounts/token"
    resourceNames:
      - "default"
    verbs:
      - "create"
      - "get"

  - apiGroups: [""]
    resources:
      - "configmaps"
    resourceNames:
      - "istio-ca-root-cert"
      - "krun"
    verbs:
      - "get"

  - apiGroups: [""]
    resources:
      - "secrets"
    resourceNames:
      - "sshdebug"
    verbs:
      - "get"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: ${WORKLOAD_NAMESPACE}
  name: gsa-${PROJECT_ID}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gsa-${PROJECT_ID}
subjects:
  - kind: User
    name: k8s-${WORKLOAD_NAMESPACE}@${PROJECT_ID}.iam.gserviceaccount.com

